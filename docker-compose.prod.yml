version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: ./docker/development/api.Dockerfile
    restart: always
    ports:
      - '${API_PORT}:${API_PORT}'
    environment:
      - DATABASE_URL=${DATABASE_URL_DOCKER}
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=${TYPESENSE_PORT}
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - API_PORT=${API_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:${API_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - fantastic-adventure-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - turbo_cache:/root/.cache/turbo

  search-indexer:
    build:
      context: .
      dockerfile: ./docker/development/search-indexer.Dockerfile
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL_DOCKER}
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=${TYPESENSE_PORT}
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fantastic-adventure-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 384M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: .
      dockerfile: ./docker/development/web.Dockerfile
    restart: always
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_TYPESENSE_HOST=${NEXT_PUBLIC_TYPESENSE_HOST}
      - NEXT_PUBLIC_TYPESENSE_PORT=${NEXT_PUBLIC_TYPESENSE_PORT}
      - NEXT_PUBLIC_TYPESENSE_PROTOCOL=${NEXT_PUBLIC_TYPESENSE_PROTOCOL}
      - NEXT_PUBLIC_TYPESENSE_API_KEY=${NEXT_PUBLIC_TYPESENSE_API_KEY}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - fantastic-adventure-network
    volumes:
      - turbo_cache:/root/.cache/turbo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - fantastic-adventure-network
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_started
