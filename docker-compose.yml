version: '3.9'

services:
  postgres:
    image: postgres:14.10-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - realtyhub_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - realtyhub-network
    env_file:
      - .env

  typesense:
    image: typesense/typesense:0.25.0
    restart: always
    ports:
      - '8108:8108'
    volumes:
      - realtyhub_typesense_data:/data
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8108/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - realtyhub-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - realtyhub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles: ["dev", "prod"]

  api:
    build:
      context: .
      dockerfile: ./docker/development/api.Dockerfile
      args:
        NODE_VERSION: 18.18.0
    restart: always
    ports:
      - '3001:3001'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=${TYPESENSE_HOST}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - realtyhub-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - turbo_cache:/root/.cache/turbo
    profiles: ["dev", "prod"]

  search-indexer:
    build:
      context: .
      dockerfile: ./docker/development/search-indexer.Dockerfile
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=${TYPESENSE_HOST}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      typesense:
        condition: service_healthy
    networks:
      - realtyhub-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 384M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles: ["dev", "prod"]

  web:
    build:
      context: .
      dockerfile: ./docker/development/web.Dockerfile
      args:
        NODE_VERSION: 18.18.0
    restart: always
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_TYPESENSE_HOST=${NEXT_PUBLIC_TYPESENSE_HOST}
      - NEXT_PUBLIC_TYPESENSE_PORT=${NEXT_PUBLIC_TYPESENSE_PORT}
      - NEXT_PUBLIC_TYPESENSE_PROTOCOL=${NEXT_PUBLIC_TYPESENSE_PROTOCOL}
      - NEXT_PUBLIC_TYPESENSE_API_KEY=${NEXT_PUBLIC_TYPESENSE_API_KEY}
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - realtyhub-network
    volumes:
      - ./apps/web:/app/apps/web:delegated
      - turbo_cache:/root/.cache/turbo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles: ["dev", "prod"]

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    networks:
      - realtyhub-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["dev"]

  prometheus:
    image: prom/prometheus:latest
    profiles: ["prod"]
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - realtyhub-network
    depends_on:
      - api
      - web

volumes:
  realtyhub_postgres_data:
    name: realtyhub_postgres_data
  realtyhub_typesense_data:
    name: realtyhub_typesense_data
  turbo_cache:
    name: turbo_cache
  prometheus_data:
    name: realtyhub_prometheus_data
  redis_data:
    name: realtyhub_redis_data

networks:
  realtyhub-network:
    driver: bridge